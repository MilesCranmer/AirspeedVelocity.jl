var documenterSearchIndex = {"docs":
[{"location":"_index/","page":"-","title":"-","text":"<README>","category":"page"},{"location":"_index/","page":"-","title":"-","text":"Pages = [\"api.md\"]","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Creating-benchmarks","page":"API","title":"Creating benchmarks","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"From the command line:","category":"page"},{"location":"api/#AirspeedVelocity.BenchPkg.benchpkg","page":"API","title":"AirspeedVelocity.BenchPkg.benchpkg","text":"benchpkg [package_name] [-r --rev <arg>]\n                        [--url <arg>]\n                        [--path <arg>]\n                        [-o, --output-dir <arg>]\n                        [-e, --exeflags <arg>]\n                        [-a, --add <arg>]\n                        [-s, --script <arg>]\n                        [--bench-on <arg>]\n                        [-f, --filter <arg>]\n                        [--nsamples-load-time <arg>]\n                        [--tune]\n                        [--dont-print]\n\nBenchmark a package over a set of revisions.\n\nArguments\n\npackage_name: Name of the package. If not given, the package is assumed to be the current directory.\n\nOptions\n\n-r, --rev <arg>: Revisions to test (delimit by comma). Use dirty to benchmark the current state of the package at path (and not a git commit). The default is {DEFAULT},dirty, which will attempt to find the default branch of the package.\n--url <arg>: URL of the package.\n--path <arg>: Path of the package. The default is . if other arguments are not given.\n-o, --output-dir <arg>: Where to save the JSON results. The default is ..\n-e, --exeflags <arg>: CLI flags for Julia (default: none).\n-a, --add <arg>: Extra packages needed (delimit by comma).\n-s, --script <arg>: The benchmark script. Default: benchmark/benchmarks.jl downloaded from stable.\n--bench-on <arg>: If the script is not set, this specifies the revision at which to download benchmark/benchmarks.jl from the package.\n-f, --filter <arg>: Filter the benchmarks to run (delimit by comma).\n--nsamples-load-time <arg>: Number of samples to take when measuring load time of   the package (default: 5). (This means starting a Julia process for each sample.)\n--dont-print: Don't print the table.\n\nFlags\n\n--tune: Whether to run benchmarks with tuning (default: false).\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"Or, directly from Julia:","category":"page"},{"location":"api/#AirspeedVelocity.Utils.benchmark-Tuple{String, Vector{String}}","page":"API","title":"AirspeedVelocity.Utils.benchmark","text":"benchmark(package_name::String, rev::Union{String,Vector{String}}; output_dir::String=\".\", script::Union{String,Nothing}=nothing, tune::Bool=false, exeflags::Cmd=``, extra_pkgs::Vector{String}=String[])\n\nRun benchmarks for a given Julia package.\n\nThis function runs the benchmarks specified in the script for the package defined by the package_spec. If script is not provided, the function will use the default benchmark script located at {PACKAGE_SRC_DIR}/benchmark/benchmarks.jl.\n\nThe benchmarks are run using the SUITE variable defined in the benchmark script, which should be of type BenchmarkTools.BenchmarkGroup. The benchmarks can be run with or without tuning depending on the value of the tune argument.\n\nThe results of the benchmarks are saved to a JSON file named results_packagename@rev.json in the specified output_dir.\n\nArguments\n\npackage_name::String: The name of the package for which to run the benchmarks.\nrev::Union{String,Vector{String}}: The revision of the package for which to run the benchmarks. You can also pass a vector of revisions to run benchmarks for multiple versions of a package.\noutput_dir::String=\".\": The directory where the benchmark results JSON file will be saved (default: current directory).\nscript::Union{String,Nothing}=nothing: The path to the benchmark script file. If not provided, the default script at {PACKAGE}/benchmark/benchmarks.jl will be used.\ntune::Bool=false: Whether to run benchmarks with tuning (default: false).\nexeflags::Cmd=``: Additional execution flags for running the benchmark script (default: empty).\nextra_pkgs::Vector{String}=String[]: Additional packages to add to the benchmark environment.\nurl::Union{String,Nothing}=nothing: URL of the package.\npath::Union{String,Nothing}=nothing: Path to the package.\nbenchmark_on::Union{String,Nothing}=nothing: If the benchmark script file is to be downloaded, this specifies the revision to use.\nfilter_benchmarks::Vector{String}=String[]: Filter the benchmarks to run (default: all).\nnsamples_load_time::Int=5: Number of samples to take for the time-to-load benchmark.\n\n\n\n\n\n","category":"method"},{"location":"api/#AirspeedVelocity.Utils.benchmark-Tuple{Vector{Pkg.Types.PackageSpec}}","page":"API","title":"AirspeedVelocity.Utils.benchmark","text":"benchmark(package_specs::Union{PackageSpec,Vector{PackageSpec}}; output_dir::String=\".\", script::Union{String,Nothing}=nothing, tune::Bool=false, exeflags::Cmd=``, extra_pkgs::Vector{String}=String[])\n\nRun benchmarks for a given Julia package.\n\nThis function runs the benchmarks specified in the script for the package defined by the package_spec. If script is not provided, the function will use the default benchmark script located at {PACKAGE_SRC_DIR}/benchmark/benchmarks.jl.\n\nThe benchmarks are run using the SUITE variable defined in the benchmark script, which should be of type BenchmarkTools.BenchmarkGroup. The benchmarks can be run with or without tuning depending on the value of the tune argument.\n\nThe results of the benchmarks are saved to a JSON file named results_packagename@rev.json in the specified output_dir.\n\nArguments\n\npackage::Union{PackageSpec,Vector{PackageSpec}}: The package specification containing information about the package for which to run the benchmarks. You can also pass a vector of package specifications to run benchmarks for multiple versions of a package.\noutput_dir::String=\".\": The directory where the benchmark results JSON file will be saved (default: current directory).\nscript::Union{String,Nothing}=nothing: The path to the benchmark script file. If not provided, the default script at {PACKAGE}/benchmark/benchmarks.jl will be used.\ntune::Bool=false: Whether to run benchmarks with tuning (default: false).\nexeflags::Cmd=``: Additional execution flags for running the benchmark script (default: empty).\nextra_pkgs::Vector{String}=String[]: Additional packages to add to the benchmark environment.\nbenchmark_on::Union{String,Nothing}=nothing: If the benchmark script file is to be downloaded, this specifies the revision to use.\nfilter_benchmarks::Vector{String}=String[]: Filter the benchmarks to run (default: all).\nnsamples_load_time::Int=5: Number of samples to take for the time-to-load benchmark.\n\n\n\n\n\n","category":"method"},{"location":"api/#Loading-and-visualizing-benchmarks","page":"API","title":"Loading and visualizing benchmarks","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"From the command line:","category":"page"},{"location":"api/#AirspeedVelocity.BenchPkgTable.benchpkgtable","page":"API","title":"AirspeedVelocity.BenchPkgTable.benchpkgtable","text":"benchpkgtable [package_name] [-r --rev <arg>]\n                             [-i --input-dir <arg>]\n                             [--ratio]\n                             [--mode <arg>]\n                             [--url <arg>]\n                             [--path <arg>]\n\nPrint a table of the benchmarks of a package as created with benchpkg.\n\nArguments\n\npackage_name: Name of the package.\n\nOptions\n\n-r, --rev <arg>: Revisions to test (delimit by comma). The default is {DEFAULT},dirty, which will attempt to find the default branch of the package.\n-i, --input-dir <arg>: Where the JSON results were saved (default: \".\").\n--url <arg>: URL of the package. Only used to get the package name.\n--path <arg>: Path of the package. The default is . if other arguments are not given.  Only used to get the package name.\n\nFlags\n\n--ratio: Whether to include the ratio (default: false). Only applies when   comparing two revisions.\n--mode: Table mode(s). Valid values are \"time\" (default), to print the   benchmark time, or \"memory\", to print the allocation and memory usage.   Both options can be passed, if delimited by comma.\n\n\n\n\n\n","category":"function"},{"location":"api/#AirspeedVelocity.BenchPkgPlot.benchpkgplot","page":"API","title":"AirspeedVelocity.BenchPkgPlot.benchpkgplot","text":"benchpkgplot package_name [-r --rev <arg>] [-i --input-dir <arg>]\n                          [-o --output-dir <arg>] [-n --npart <arg>]\n                          [--format <arg>]\n\nPlot the benchmarks of a package as created with benchpkg.\n\nArguments\n\npackage_name: Name of the package.\n\nOptions\n\n-r, --rev <arg>: Revisions to test (delimit by comma).\n-i, --input-dir <arg>: Where the JSON results were saved (default: \".\").\n-o, --output-dir <arg>: Where to save the plots results (default: \".\").\n-n, --npart <arg>: Max number of plots per page (default: 10).\n--format <arg>: File type to save the plots as (default: \"png\").\n\n\n\n\n\n","category":"function"},{"location":"api/#AirspeedVelocity.Utils.load_results-Tuple{Vector{Pkg.Types.PackageSpec}}","page":"API","title":"AirspeedVelocity.Utils.load_results","text":"load_results(specs::Vector{PackageSpec}; input_dir::String=\".\")\n\nLoad the results from JSON files for each PackageSpec in the specs vector. The function assumes that the JSON files are located in the input_dir directory and are named as \"results_{s}.json\" where s is equal to PackageName@Rev.\n\nThe function returns a combined OrderedDict, to be input to the combined_plots function.\n\nArguments\n\nspecs::Vector{PackageSpec}: Vector of each package revision to be loaded (as PackageSpec).\ninput_dir::String=\".\": Directory where the results. Default is current directory.\n\nReturns\n\nOrderedDict{String,OrderedDict}: Combined results ready to be passed to the combined_plots function.\n\n\n\n\n\n","category":"method"},{"location":"api/#AirspeedVelocity.PlotUtils.combined_plots-Tuple{OrderedDict}","page":"API","title":"AirspeedVelocity.PlotUtils.combined_plots","text":"combined_plots(combined_results::OrderedDict; npart=10)\n\nCreate a combined plot of the results loaded from the load_results function. The function partitions the plots into smaller groups of size npart (defaults to 10) and combines the plots in each group vertically. It returns an array of combined plots.\n\nArguments\n\ncombined_results::OrderedDict: Data to be plotted, obtained from the load_results function.\nnpart::Int=10: Max plots to be combined in a single vertical group. Default is 10.\n\nReturns\n\nArray{Plotly.Plot,1}: An array of combined Plots objects, with each element representing a group of up to npart vertical plots.\n\n\n\n\n\n","category":"method"},{"location":"api/#AirspeedVelocity.TableUtils.create_table-Tuple{OrderedDict}","page":"API","title":"AirspeedVelocity.TableUtils.create_table","text":"create_table(combined_results::OrderedDict; kws...)\n\nCreate a markdown table of the results loaded from the load_results function. If there are two results for a given benchmark, will have an additional column for the comparison, assuming the first revision is one to compare against.\n\nThe formatter keyword argument generates the column value. It defaults to TableUtils.format_time, which prints the median time ± the interquantile range. TableUtils.format_memory is also available to print the number of allocations and the allocated memory.\n\n\n\n\n\n","category":"method"},{"location":"#AirspeedVelocity.jl","page":"Home","title":"AirspeedVelocity.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Coverage)","category":"page"},{"location":"","page":"Home","title":"Home","text":"AirspeedVelocity.jl strives to make it easy to benchmark Julia packages over their lifetime. It is inspired by asv.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package allows you to:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Generate benchmarks directly from the terminal with an easy-to-use CLI.\nCompare many commits/tags/branches at once.\nPlot those benchmarks, automatically flattening your benchmark suite into a list of plots with generated titles.\nRun in CI with a one‑line GitHub Action that comments benchmark results on every PR.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package also freezes the benchmark script at a particular revision, so there is no worry about the old history overwriting the benchmark.","category":"page"},{"location":"","page":"Home","title":"Home","text":"https://github.com/MilesCranmer/AirspeedVelocity.jl/assets/7593028/f27b04ef-8491-4f49-a312-4df0fae00598","category":"page"},{"location":"","page":"Home","title":"Home","text":"AirspeedVelocity.jl\nInstallation\nExamples\nUsing in CI\nOption 1: PR Comments\nOption 2: Job Summary\nMultiple Julia versions\nCI Parameters\nFurther examples\nCLI Reference\nbenchpkg\nbenchpkgtable\nbenchpkgplot\nRelated packages","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can install the CLI with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia -e 'using Pkg; Pkg.activate(temp=true); Pkg.add(\"AirspeedVelocity\"); Pkg.build(\"AirspeedVelocity\")'","category":"page"},{"location":"","page":"Home","title":"Home","text":"This will install two executables at ~/.julia/bin - make sure to have it on your PATH.","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You may use the CLI to generate benchmarks for any package with, e.g.,","category":"page"},{"location":"","page":"Home","title":"Home","text":"benchpkg","category":"page"},{"location":"","page":"Home","title":"Home","text":"This will benchmark the package defined in the current directory at the current dirty state, against the default branch (i.e., main or master), over all benchmarks defined in benchmark/benchmarks.jl using BenchmarkTools.jl. You should have a const SUITE = BenchmarkGroup() defined in this file, which you have added benchmarks to.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This will then print a markdown table of the results while also saving the JSON results to the current directory.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the further examples for more details.","category":"page"},{"location":"#Using-in-CI","page":"Home","title":"Using in CI","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"AirspeedVelocity.jl provides two ways to display benchmark results in GitHub Actions:","category":"page"},{"location":"#Option-1:-PR-Comments","page":"Home","title":"Option 1: PR Comments","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Posts benchmark results as comments on pull requests.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Add .github/workflows/benchmark.yml to your package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"name: Benchmark this PR\non:\n  pull_request_target:\n    branches: [ master ]  # change to your default branch\npermissions:\n  pull-requests: write    # needed to post comments\n\njobs:\n  bench:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: MilesCranmer/AirspeedVelocity.jl@action-v1\n        with:\n          julia-version: '1'","category":"page"},{"location":"#Option-2:-Job-Summary","page":"Home","title":"Option 2: Job Summary","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Displays benchmark results in the GitHub Actions job summary (visible in the Actions tab).","category":"page"},{"location":"","page":"Home","title":"Home","text":"name: Benchmark this PR\non:\n  pull_request:             # no need for pull_request_target\n    branches: [ master ]\n# no permissions needed\n\njobs:\n  bench:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: MilesCranmer/AirspeedVelocity.jl@action-v1\n        with:\n          julia-version: '1'\n          job-summary: 'true'","category":"page"},{"location":"","page":"Home","title":"Home","text":"Both workflows run AirspeedVelocity and display results with separate, collapsible tables for runtime and memory.","category":"page"},{"location":"#Multiple-Julia-versions","page":"Home","title":"Multiple Julia versions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"strategy:\n  matrix:\n    julia: ['1', '1.10']\n\nsteps:\n  - uses: MilesCranmer/AirspeedVelocity.jl@action-v1\n    with:\n      julia-version: ${{ matrix.julia }}","category":"page"},{"location":"","page":"Home","title":"Home","text":"Each matrix leg writes its own comment (Option 1) or section in the job summary (Option 2).","category":"page"},{"location":"#CI-Parameters","page":"Home","title":"CI Parameters","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Input Default What it does\njulia-version \"1\" Julia version to install\njob-summary \"false\" Output to job summary instead of PR comment\ntune \"false\" --tune to tune benchmarks first\nmode \"time,memory\" Which tables to generate (time, memory)\nenable-plots \"false\" Upload PNG plots as artifact\nfilter \"\" --filter list for benchpkg\nexeflags \"\" --exeflags for Julia runner","category":"page"},{"location":"#Further-examples","page":"Home","title":"Further examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can configure all options with the CLI flags. For example, to benchmark the registered package Transducers.jl at the revisions v0.4.20, v0.4.70, and master, you can use:","category":"page"},{"location":"","page":"Home","title":"Home","text":"benchpkg Transducers \\\n    --rev=v0.4.20,v0.4.70,master \\\n    --bench-on=v0.4.20","category":"page"},{"location":"","page":"Home","title":"Home","text":"This will further use the benchmark script benchmark/benchmarks.jl as it was defined at v0.4.20, and then save the JSON results in the current directory.","category":"page"},{"location":"","page":"Home","title":"Home","text":"We can explicitly view the results of the benchmark as a table with benchpkgtable:","category":"page"},{"location":"","page":"Home","title":"Home","text":"benchpkgtable Transducers \\\n    --rev=v0.4.20,v0.4.70,master","category":"page"},{"location":"","page":"Home","title":"Home","text":"We can also generate plots of the revisions with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"benchpkgplot Transducers \\\n    --rev=v0.4.20,v0.4.70,master \\\n    --format=pdf \\\n    --npart=5","category":"page"},{"location":"","page":"Home","title":"Home","text":"which will generate a pdf file for each set of 5 plots, showing the change with each revision:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: runtime_at_versions)","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can also provide a custom benchmark. For example, let's say you have a file script.jl, defining a benchmark for SymbolicRegression.jl (we always need to define the SUITE variable as a BenchmarkGroup):","category":"page"},{"location":"","page":"Home","title":"Home","text":"using BenchmarkTools, SymbolicRegression\nconst SUITE = BenchmarkGroup()\n\n# Create hierarchy of benchmarks:\nSUITE[\"eval_tree_array\"] = BenchmarkGroup()\n\noptions = Options(; binary_operators=[+, -, *], unary_operators=[cos])\ntree = Node(; feature=1) + cos(3.2f0 * Node(; feature=2))\n\n\nfor n in [10, 20]\n    SUITE[\"eval_tree_array\"][n] = @benchmarkable(\n        eval_tree_array($tree, X, $options),\n        evals=10,\n        samples=1000,\n        setup=(X=randn(Float32, 2, $n))\n    )\nend\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"Inside this script, we will also have access to the PACKAGE_VERSION constant, to allow for different behavior depending on tag. We can run this benchmark over the history of SymbolicRegression.jl with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"benchpkg SymbolicRegression \\\n    -r v0.15.3,v0.16.2 \\\n    -s script.jl \\\n    -o results/ \\\n    --exeflags=\"--threads=4 -O3\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"where we have also specified the output directory and extra flags to pass to the julia executable. We can also now visualize this:","category":"page"},{"location":"","page":"Home","title":"Home","text":"benchpkgplot SymbolicRegression \\\n    -r v0.15.3,v0.16.2 \\\n    -i results/ \\\n    -o plots/","category":"page"},{"location":"#CLI-Reference","page":"Home","title":"CLI Reference","text":"","category":"section"},{"location":"#benchpkg","page":"Home","title":"benchpkg","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For running benchmarks, you can use the benchpkg command, which is built into the ~/.julia/bin folder:","category":"page"},{"location":"","page":"Home","title":"Home","text":"    benchpkg [package_name] [-r --rev <arg>]\n                            [--url <arg>]\n                            [--path <arg>]\n                            [-o, --output-dir <arg>]\n                            [-e, --exeflags <arg>]\n                            [-a, --add <arg>]\n                            [-s, --script <arg>]\n                            [--bench-on <arg>]\n                            [-f, --filter <arg>]\n                            [--nsamples-load-time <arg>]\n                            [--tune]\n                            [--dont-print]\n\nBenchmark a package over a set of revisions.\n\n#### Arguments\n\n- `package_name`: Name of the package. If not given, the package is assumed to be\n  the current directory.\n\n#### Options\n\n- `-r, --rev <arg>`: Revisions to test (delimit by comma). Use `dirty` to\n  benchmark the current state of the package at `path` (and not a git commit).\n  The default is `{DEFAULT},dirty`, which will attempt to find the default branch\n  of the package.\n- `--url <arg>`: URL of the package.\n- `--path <arg>`: Path of the package. The default is `.` if other arguments are not given.\n- `-o, --output-dir <arg>`: Where to save the JSON results. The default is `.`.\n- `-e, --exeflags <arg>`: CLI flags for Julia (default: none).\n- `-a, --add <arg>`: Extra packages needed (delimit by comma).\n- `-s, --script <arg>`: The benchmark script. Default: `benchmark/benchmarks.jl` downloaded from `stable`.\n- `--bench-on <arg>`: If the script is not set, this specifies the revision at which\n  to download `benchmark/benchmarks.jl` from the package.\n- `-f, --filter <arg>`: Filter the benchmarks to run (delimit by comma).\n- `--nsamples-load-time <arg>`: Number of samples to take when measuring load time of\n    the package (default: 5). (This means starting a Julia process for each sample.)\n- `--dont-print`: Don't print the table.\n\n#### Flags\n\n- `--tune`: Whether to run benchmarks with tuning (default: false).","category":"page"},{"location":"#benchpkgtable","page":"Home","title":"benchpkgtable","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can also just generate a table from stored JSON results:","category":"page"},{"location":"","page":"Home","title":"Home","text":"    benchpkgtable [package_name] [-r --rev <arg>]\n                                 [-i --input-dir <arg>]\n                                 [--ratio]\n                                 [--mode <arg>]\n                                 [--url <arg>]\n                                 [--path <arg>]\n\nPrint a table of the benchmarks of a package as created with `benchpkg`.\n\n#### Arguments\n\n- `package_name`: Name of the package.\n\n#### Options\n\n- `-r, --rev <arg>`: Revisions to test (delimit by comma).\n  The default is `{DEFAULT},dirty`, which will attempt to find the default branch\n  of the package.\n- `-i, --input-dir <arg>`: Where the JSON results were saved (default: \".\").\n- `--url <arg>`: URL of the package. Only used to get the package name.\n- `--path <arg>`: Path of the package. The default is `.` if other arguments are not given.\n   Only used to get the package name.\n\n#### Flags\n\n- `--ratio`: Whether to include the ratio (default: false). Only applies when\n    comparing two revisions.\n- `--mode`: Table mode(s). Valid values are \"time\" (default), to print the\n    benchmark time, or \"memory\", to print the allocation and memory usage.\n    Both options can be passed, if delimited by comma.","category":"page"},{"location":"#benchpkgplot","page":"Home","title":"benchpkgplot","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For plotting, you can use the benchpkgplot function:","category":"page"},{"location":"","page":"Home","title":"Home","text":"    benchpkgplot package_name [-r --rev <arg>]\n                              [-i --input-dir <arg>]\n                              [-o --output-dir <arg>]\n                              [-n --npart <arg>]\n                              [--format <arg>]\n\nPlot the benchmarks of a package as created with `benchpkg`.\n\n#### Arguments\n\n- `package_name`: Name of the package.\n\n#### Options\n\n- `-r, --rev <arg>`: Revisions to test (delimit by comma).\n- `-i, --input-dir <arg>`: Where the JSON results were saved (default: \".\").\n- `-o, --output-dir <arg>`: Where to save the plots results (default: \".\").\n- `-n, --npart <arg>`: Max number of plots per page (default: 10).\n- `--format <arg>`: File type to save the plots as (default: \"png\").","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you prefer to use the Julia API, you can use the benchmark function for generating data. The API is given here.","category":"page"},{"location":"#Related-packages","page":"Home","title":"Related packages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Also be sure to check out PkgBenchmark.jl. PkgBenchmark.jl is a simple wrapper of BenchmarkTools.jl to interface it with Git, and is a good choice for building custom analysis workflows.","category":"page"},{"location":"","page":"Home","title":"Home","text":"However, for me this wrapper is a bit too thin, which is why I created this package. AirspeedVelocity.jl tries to have more features and workflows readily-available. It also emphasizes a CLI (though there is a Julia API), as my subjective view is that this is more suitable for interacting side-by-side with git.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"api.md\"]","category":"page"}]
}
